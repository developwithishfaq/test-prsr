package com.adm.url_parser.impls.main_sites.instaimport android.util.Logimport com.adm.url_parser.commons.impl.get_in_device_api.GetInDeviceApiImplimport com.adm.url_parser.impls.main_sites.insta.impl.InstagramDirectUrlApiimport com.adm.url_parser.impls.main_sites.insta.impl.InstagramDirectUrlApiVideoPreviewimport com.adm.url_parser.impls.main_sites.insta.impl.graphql.GraphQlConfigsimport com.adm.url_parser.impls.main_sites.insta.impl.graphql.InstaGraphQlScrapperimport com.adm.url_parser.interfaces.ApiLinkScrapperimport com.adm.url_parser.interfaces.ApiLinkScrapperForSubImplimport com.adm.url_parser.models.ParsedVideoimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.asyncimport kotlinx.coroutines.withContextclass InstaDownloaderMain(    private val graphQlConfigs: GraphQlConfigs) : ApiLinkScrapper {    private val TAG = "InstaDownloaderMain"    override suspend fun scrapeLink(url: String): Result<ParsedVideo?> {        Log.d(TAG, "scrapeLink: $url")        return withContext(Dispatchers.IO) {            val instaDirectUrlPreview: ApiLinkScrapperForSubImpl =                InstagramDirectUrlApiVideoPreview()            val instaDirectUrl: ApiLinkScrapperForSubImpl = InstagramDirectUrlApi()            val instaGraphQlApi: ApiLinkScrapperForSubImpl = InstaGraphQlScrapper(graphQlConfigs)            val deferredResults = if (url.contains("/p/")) {                listOf(                    async { instaGraphQlApi.scrapeLink(url) },                )            } else {                listOf(                    async { instaDirectUrlPreview.scrapeLink(url) },                    async { instaDirectUrl.scrapeLink(url) },                    async { instaGraphQlApi.scrapeLink(url) },                    async {                        val response = GetInDeviceApiImpl().scrapeLink(url)                        response                    }                )            }            var video: ParsedVideo? = null            var error: String? = null            deferredResults.forEachIndexed { index, model ->                val result = model.await()                if (result.isSuccess) {                    val modelNew = result.getOrNull()                    if (modelNew != null) {                        video = modelNew                    }                } else {                    error = result.exceptionOrNull()?.message                }            }            if (video != null) {                Result.success(video)            } else {                Result.failure(Exception("No response found in InstaDownloaderMain error $error"))            }        }    }}